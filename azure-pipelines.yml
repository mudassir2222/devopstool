trigger:
  - main  # Adjust the branch as needed

pool:
  name: 'default'  # Set to default agent pool

jobs:
  - job: Build
    displayName: 'Build Java Application'
    pool:
      name: 'Default'

    variables:
      DOCKER_BUILDKIT: '1'
      DOCKER_REGISTRY: 'mudassir376'  # Replace with your Docker Hub username
      DOCKER_IMAGE_NAME: 'automate'  # Replace with your image name
      DOCKER_IMAGE_TAG: 'latest'
      DATE_TAG: $(Build.BuildId)  # Use Azure DevOps Build ID as a tag

    steps:
      # Step 1: Set Docker socket permissions
      - script: |
          sudo chmod 666 /var/run/docker.sock
        displayName: 'Set Docker socket permissions'

      # Step 2: Set JAVA_HOME correctly (Use Java 11 path as per your previous example)
      - script: |
          echo "##vso[task.setvariable variable=JAVA_HOME]/usr/lib/jvm/java-11-openjdk-amd64"
          echo "JAVA_HOME is set to: $(JAVA_HOME)"
        displayName: 'Set JAVA_HOME'

      # Step 3: Print Maven Path and verify Maven installation
      - script: |
          echo "Maven Path: $(which mvn)"
          echo "JAVA_HOME is: $(JAVA_HOME)"
          mvn -v  # Verify Maven is correctly installed
        displayName: 'Verify Maven Installation'

      # Step 4: Maven build step (Build Maven Project)
      - task: Maven@4
        inputs:
          mavenPomFile: 'pom.xml'  # Root-level `pom.xml` as per your structure
          publishJUnitResults: true
          goals: 'clean install -DskipTests'
          javaHomeOption: 'Path'
          jdkDirectory: '$(JAVA_HOME)'  # Use the JAVA_HOME variable set earlier
          mavenVersionOption: 'Path'
          mavenDirectory: '/usr'  # Path to Maven installation
          options: ''  # Removed -X for less verbose output
        displayName: 'Build Maven Project'

      # Step 5: Docker build and push to Azure Container Registry (ACR)
      - task: Docker@2
        inputs:
          command: 'buildAndPush'
          repository: 'samrg.azurecr.io/devopstool'  # Replace with your actual ACR repository name
          dockerfile: 'Dockerfile'  # Root-level Dockerfile
          containerRegistry: 'md-service-connection-docker'  # Replace with your ACR service connection name
          tags: |
            latest-$(Build.BuildId)  # Correct tag format without spaces or comments

      # Step 6: Install zip utility for archiving build artifacts
      - script: |
          sudo apt-get update
          sudo apt-get install -y zip
        displayName: 'Install zip utility'

      # Step 7: Archive build artifacts
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(Build.BinariesDirectory)'  # Specify the directory to archive
          includeRootFolder: true  # Include the root folder
          archiveType: 'zip'  # Archive type
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'  # Archive path and filename
          replaceExistingArchive: true  # Replace existing archive if it exists
