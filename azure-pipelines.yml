trigger:
  - main  # Ensure this points to your branch

pool:
  name: 'default'  # Use the default agent pool, change if needed

jobs:
  - job: Build
    displayName: 'Build Java Application'
    pool:
      name: 'Default'

    variables:
      DOCKER_BUILDKIT: '1'
      DOCKER_REGISTRY: 'mudassir376'  # Your Docker Hub username
      DOCKER_IMAGE_NAME: 'automate'  # Your image name
      DOCKER_IMAGE_TAG: 'latest'
      DATE_TAG: $(Build.BuildId)  # Using Azure DevOps Build ID as the tag

    steps:
      # Step 1: Set Docker socket permissions
      - script: |
          sudo chmod 666 /var/run/docker.sock
        displayName: 'Set Docker socket permissions'

      # Step 2: Set JAVA_HOME for Java 11
      - script: |
          echo "##vso[task.setvariable variable=JAVA_HOME]/usr/lib/jvm/java-11-openjdk-amd64"
          echo "JAVA_HOME is set to: $(JAVA_HOME)"
        displayName: 'Set JAVA_HOME'

      # Step 3: Verify Maven installation
      - script: |
          echo "Maven Path: $(which mvn)"
          echo "JAVA_HOME is: $(JAVA_HOME)"
          mvn -v  # Verify Maven is correctly installed
        displayName: 'Verify Maven Installation'

      # Step 4: Build with Maven
      - task: Maven@4
        inputs:
          mavenPomFile: 'pom.xml'  # Ensure path is correct
          publishJUnitResults: true
          goals: 'clean install -DskipTests'
          javaHomeOption: 'Path'
          jdkDirectory: '$(JAVA_HOME)'  # Use JAVA_HOME for the JDK
          mavenVersionOption: 'Path'
          mavenDirectory: '/usr'  # Maven installation path
          options: ''  # Optional Maven options
        displayName: 'Build Maven Project'

      # Step 5: Docker Build and Push to ACR
      - task: Docker@2
        inputs:
          command: 'buildAndPush'
          repository: 'muddaacr.azurecr.io/devopstool'  # Your ACR repository
          dockerfile: 'Dockerfile'  # Adjust if your Dockerfile is elsewhere
          containerRegistry: 'md-service-connection-Acr'  # ACR service connection
          tags: |
            latest-$(Build.BuildId)
        displayName: 'Build and Push Docker Image'

      # Step 6: Install zip utility for archiving
      - script: |
          sudo apt-get update
          sudo apt-get install -y zip
        displayName: 'Install zip utility'

      # Step 7: Archive build artifacts
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(Build.BinariesDirectory)'  # Specify your artifact folder
          includeRootFolder: true
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
          replaceExistingArchive: true
        displayName: 'Archive Build Artifacts'
